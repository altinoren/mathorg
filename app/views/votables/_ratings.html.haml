- if not defined? scope 
  - scope = nil

- if not defined? disp_text
  - disp_text = nil

- if not defined? show_average
  - show_average = true

- if not defined? show_rating_options
  - show_rating_options = true

.vote{id: "#{votable.class}_#{votable.id}_#{format_scope(scope)}_rate"}
  %strong
    - # if disp_text is supplied, use that. Otherwise use the name of scope. Otherwise go with "Rating".
    = (disp_text || scope || "Rating").capitalize + ':'

  - n = votable.get_upvotes(vote_scope: scope).size
  - if n > 0
    - average = votable.get_upvotes(vote_scope: scope).sum(:vote_weight).to_f / n
    - hovertext = ""
    - if (defined? rating_meanings)
      - for i in lower..upper
        - hovertext += "#{i}: #{rating_meanings[i.to_s]}\n"
      - hovertext.strip!
    %span{title: hovertext}
      = "#{average} (#{n} #{'rating'.pluralize(n)})"
  -  else 
    No ratings yet

  - if user_signed_in? && show_rating_options
    - # votable.get_upvotes(stuff) should be an array with either 1 or 0 elements
    - current_user_vote = votable.get_upvotes(vote_scope: scope, voter_id: current_user.id)[0]
    - current_user_vote = current_user_vote[:vote_weight] unless current_user_vote.nil?

    = surround '( ', ' )' do
      - for i in lower..upper
        - path = rate_path(rating: i, votable_id: votable.id, votable_type: votable.class, | 
          scope: scope, disp_text: disp_text, lower: lower, upper: upper, show_average: show_average, rating_meanings: rating_meanings)
        - text = (current_user_vote == i) ? raw("<strong>#{i}</strong>") : i
        - title = ((defined? rating_meanings) && (rating_meanings != nil) && (rating_meanings[i.to_s] != nil)) ? rating_meanings[i.to_s] : ""
        = link_to text, path, { method: :post, remote: true, title: title }

        - # Don't display a separator pipe if you're at the end
        - if i != upper
          | 
